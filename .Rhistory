panel(shape, main = "", fac = 'Archaeological_Unit')
coo_plot(shape[1], col = "grey", main = "Artefact #1")
shape <- coo_center(shape)
shape <- coo_scale(shape)
shape <- coo_close(shape)
stack(shape, main = "")
calibrate_harmonicpower_efourier(shape, id = 4, nb.h = 20, plot = FALSE)
calibrate_reconstructions_efourier(shape)
calibrate_deviations_efourier(shape)
efashape <- efourier(shape, nb.h = 11, smooth.it = 0, norm = TRUE)
pcashape <- PCA(efashape)
PCcontrib(pcashape, nax = 1:5)
scree(pcashape)
plot_PCA(pcashape, axes = c(1,2), ~Archaeological_Unit, morphospace_position = "full_axes", zoom = 2, chull = FALSE) %>% layer_points(cex = 1) %>% layer_ellipses()
plot_PCA(pcashape, axes = c(1,3), ~Archaeological_Unit, morphospace_position = "full_axes", zoom = 2, chull = FALSE) %>% layer_points(cex = 1) %>% layer_ellipses()
boxplot(pcashape, ~Archaeological_Unit, nax = 1:5)
dashape <- LDA(pcashape, ~Archaeological_Unit, retain = 0.95)
dashape$CV.correct
dashape$CV.ce
plot_LDA(dashape, axes = c(1,2), zoom = 2, chull = FALSE) %>% layer_points(cex = 1) %>% layer_ellipses()
MANOVA(pcashape, ~Archaeological_Unit, retain = 0.95)
MANOVA_PW(pcashape, ~Archaeological_Unit, retain = 0.95)
CLUST(pcashape, ~Archaeological_Unit, dist_method = "euclidean", hclust_method = "complete", k = 4, retain = 0.95)
meanshapes <- MSHAPES(efashape, ~Archaeological_Unit)
plot_MSHAPES(meanshapes, size = 0.75)
centroidsize <- as_tibble(coo_centsize(shape))
centroidsize <- rename(centroidsize, cs = "value")
pcascores <- as_tibble(pcashape$x)
databasedata <- cbind(database,centroidsize, pcascores)
head(databasedata)
ggplot(databasedata, aes(cs, PC1)) + geom_point(size = 1, pch = 16, alpha = 0.4, colour = "#E69F00", fill = "#ffd475") + theme(text = element_text(size=8), axis.text = element_text(size = 8)) + xlab("Centroid Size") + ylab("Principal Component 1")
ggplot(databasedata, aes(PC1, cs)) + geom_point(size = 1, pch = 16, alpha = 0.4, colour = "#E69F00", fill = "#ffd475") + theme(text = element_text(size=8), axis.text = element_text(size = 8)) + xlab("Principal Component 1") + ylab("CS (Centroid Size)")
ggplot(databasedata, aes(PC1, cs)) + geom_point(size = 1, pch = 16, alpha = 0.4, colour = "#E69F00", fill = "#ffd475") + geom_smooth() + theme(text = element_text(size=8), axis.text = element_text(size = 8)) + xlab("Principal Component 1") + ylab("CS (Centroid Size)")
ggplot(databasedata, aes(PC1, cs)) + geom_point(size = 1, pch = 16, alpha = 0.4, colour = "#E69F00", fill = "#ffd475") + geom_smooth(method=lm, se=FALSE) + theme(text = element_text(size=8), axis.text = element_text(size = 8)) + xlab("Principal Component 1") + ylab("CS (Centroid Size)")
ggplot(databasedata, aes(PC1, cs)) + geom_point(size = 2, pch = 16, alpha = 0.4, colour = "#E69F00", fill = "#ffd475") + geom_smooth(method=lm, se=FALSE) + theme(text = element_text(size=8), axis.text = element_text(size = 8)) + xlab("Principal Component 1") + ylab("CS (Centroid Size)")
cor(databasedata$PC1, databasedata$cs)
cor.test(databasedata$PC1, databasedata$cs)
plot_LDA(dashape, axes = c(1,2), zoom = 2, chull = FALSE) %>% layer_points(cex = 1) %>% layer_ellipses() %>% layer_ellipsesfilled()
tinytex::reinstall_tinytex()
2 + 2
Christian <- 2+2
rm(Christian)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL","English") #Windowsにおけるエンコード問題解決用
if(!require("Momocs")) install.packages('Momocs', repos='http://cran.us.r-project.org')  # Momocsのチェックとインストール
if(!require("tidyverse")) install.packages('tidyverse', repos='http://cran.us.r-project.org')  #tidyverseのチェックとインストール
if(!require("rio")) install.packages('rio', repos='http://cran.us.r-project.org')  #rioのチェックとインストール
database <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/database.rds")  #GitHubリポジトリの遺跡・資料データをdatabaseへ読み込み
tpsdata <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/tpslines.rds")   #GitHubリポジトリのtpsアウトラインデータをtpsdataへ読み込み
library(Momocs)  #Momocsのアクティベート
library(tidyverse)  #tidyverseのアクティベート
head(database)  #databaseの先頭数行を呼び出す
database$Archaeological_Unit
database$Archaeological_Unit <- as.factor(database$Archaeological_Unit)  #Archaeological_Unitを因子型(factor)に変更
is.factor(database$Archaeological_Unit) # check to see the data is now of type 'character'／データが文字列(character)かどうかを確認
summary(database$Archaeological_Unit) #Archaeological_Unitを集計
shape <- Out(tpsdata$coo, fac = database) # incorporating our database as our factors／tps座標データをアウトラインに変換し，データベースの因子型データArchaeological_unitとともにshapeに格納
shape # call the object／オブジェクトの呼び出し
panel(shape, main = "", fac = 'Archaeological_Unit')  #「かたち」のデータを，考古学的文化ごとに色分けして可視化
mosaic(shape)
mosaic(shape, fac = "Archaeological_Unit")
mosaic(shape, ~Archaeological_Unit)
coo_plot(shape[1], col = "grey", main = "Artefact #1")   # 資料1(shape[1])の「かたち」を灰色に塗りつぶして表示する，col=""で色の指定，main=""はキャプション
coo_plot(shape[1], col = "grey", main = "Artefact #1")   # 資料1(shape[1])の「かたち」を灰色に塗りつぶして表示する，col=""で色の指定，main=""はキャプション
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL","English") #Windowsにおけるエンコード問題解決用
if(!require("Momocs")) install.packages('Momocs', repos='http://cran.us.r-project.org')  # Momocsのチェックとインストール
if(!require("tidyverse")) install.packages('tidyverse', repos='http://cran.us.r-project.org')  #tidyverseのチェックとインストール
if(!require("rio")) install.packages('rio', repos='http://cran.us.r-project.org')  #rioのチェックとインストール
database <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/database.rds")  #GitHubリポジトリの遺跡・資料データをdatabaseへ読み込み
tpsdata <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/tpslines.rds")   #GitHubリポジトリのtpsアウトラインデータをtpsdataへ読み込み
library(Momocs)  #Momocsのアクティベート
library(tidyverse)  #tidyverseのアクティベート
head(database)  #databaseの先頭数行を呼び出す
database$Archaeological_Unit <- as.factor(database$Archaeological_Unit)  #Archaeological_Unitを因子型(factor)に変更
is.factor(database$Archaeological_Unit) # check to see the data is now of type 'character'／データが文字列(character)かどうかを確認
summary(database$Archaeological_Unit) #Archaeological_Unitを集計
shape <- Out(tpsdata$coo, fac = database) # incorporating our database as our factors／tps座標データをアウトラインに変換し，データベースの因子型データArchaeological_unitとともにshapeに格納
shape # call the object／オブジェクトの呼び出し
panel(shape, main = "", fac = 'Archaeological_Unit')  #「かたち」のデータを，考古学的文化ごとに色分けして可視化
coo_plot(shape[1], col = "grey", main = "Artefact #1")   # 資料1(shape[1])の「かたち」を灰色に塗りつぶして表示する，col=""で色の指定，main=""はキャプション
shape <- coo_center(shape)  # 基準点を揃える
shape <- coo_scale(shape)  #　スケールを揃える
shape <- coo_close(shape)  # 開曲線を閉じる
stack(shape, main = "")　　# shapeの重ね合わせ表示
calibrate_harmonicpower_efourier(shape, id = 4, nb.h = 20, plot = FALSE)  #資料番号4(id=4)の調和数を20まで(nb.h=20)推定
calibrate_reconstructions_efourier(shape)  # shapeの復元を計算
calibrate_deviations_efourier(shape)  # オリジナルと計算結果の「かたち」の偏差を計算
efashape <- efourier(shape, nb.h = 11, smooth.it = 0, norm = TRUE)  # shapeのアウトライン係数を第11調和まで計算しefashapeに格納
efashape
pcashape <- PCA(efashape)  #EFAの結果をPCAクラスに変換しpcashapeに格納
PCcontrib(pcashape, nax = 1:5)  #EFAの主成分分析結果を第1～第5主成分軸まで計算表示
pcashape$x
scree(pcashape)  #pcashapeの各主成分軸の寄与度を計算
plot_PCA(pcashape, axes = c(1,2), ~Archaeological_Unit, morphospace_position = "full_axes", zoom = 2, chull = FALSE) %>% layer_points(cex = 1) %>% layer_ellipses()  #PC1+PC2による考古学的文化により色分けした散布図を描画
plot_PCA(pcashape, axes = c(1,2), ~Archaeological_Unit, morphospace_position = "full_axes", zoom = 2, chull = FALSE) %>% layer_points(cex = 1) %>% layer_ellipses()  #PC1+PC2による考古学的文化により色分けした散布図を描画
plot_PCA(pcashape, axes = c(1,2), ~Archaeological_Unit, morphospace_position = "XY", zoom = 2, chull = FALSE) %>% layer_points(cex = 1) %>% layer_ellipses()  #PC1+PC2による考古学的文化により色分けした散布図を描画
plot_PCA(pcashape, axes = c(1,3), ~Archaeological_Unit, morphospace_position = "full_axes", zoom = 2, chull = FALSE) %>% layer_points(cex = 1) %>% layer_ellipses()  #PC1+PC3 (axes=c(1,3))による考古学的文化により色分けした散布図を描画
boxplot(pcashape, ~Archaeological_Unit, nax = 1:5)  # pcashapeの考古学的文化ごとの箱ひげ図を描画
calibrate_harmonicpower_efourier(shape, id = 4, nb.h = 20, plot = FALSE)  #資料番号4(id=4)の調和数を20まで(nb.h=20)推定
calibrate_harmonicpower_efourier(shape, nb.h = 20, plot = FALSE)  #資料番号4(id=4)の調和数を20まで(nb.h=20)推定
dashape <- LDA(pcashape, ~Archaeological_Unit, retain = 0.95)  # pcashapeと「考古学的文化」に対し線形判別分析を実施，dashapeに格納
dashape$CV.correct  #dashapeを交差検証
dashape$CV.ce  #交差検証表を作成
classification_metrics(dashape)
plot_LDA(dashape, axes = c(1,2), zoom = 2, chull = FALSE) %>% layer_points(cex = 1) %>% layer_ellipses()  # dashapeの線形判別分析の結果を散布図として描画
MANOVA(pcashape, ~Archaeological_Unit, retain = 0.95)  # pcashapeと「考古学的文化」のMANOVAを実施
MANOVA(pcashape, ~Archaeological_Unit, retain = 0.95)  # pcashapeと「考古学的文化」のMANOVAを実施
MANOVA_PW(pcashape, ~Archaeological_Unit, retain = 0.95)  #ペアワイズ法MANOVAを実施
CLUST(pcashape, ~Archaeological_Unit, dist_method = "euclidean", hclust_method = "complete", k = 4, retain = 0.95)  # pcashapeと「考古学的文化」によるクラスター樹形図，ユークリッド法，クラスター数=4
CLUST(pcashape, ~Archaeological_Unit, dist_method = "euclidean", hclust_method = "complete", retain = 0.95)  # pcashapeと「考古学的文化」によるクラスター樹形図，ユークリッド法，クラスター数=4
CLUST(pcashape, ~Archaeological_Unit, dist_method = "euclidean", hclust_method = "complete", k = 4, retain = 0.95)  # pcashapeと「考古学的文化」によるクラスター樹形図，ユークリッド法，クラスター数=4
CLUST(pcashape, ~Archaeological_Unit, dist_method = "euclidean", hclust_method = "complete", k = 4, retain = 0.95) + theme_gray()  # 背景をtheme_greyに変更
KMEANS(pcashape, centers = 4)  # クラスター中心(分離数)を4としてk-means法を実施
meanshapes <- MSHAPES(efashape, ~Archaeological_Unit)  # efashapeと「考古学的文化」により平均的「かたち」を取得しmeanshapesに格納
plot_MSHAPES(meanshapes, size = 0.75)  # meanshapesを描画，左下～右上中央が個別の「考古学的文化」の剥片尖頭器の平均的「かたち」
centroidsize <- as_tibble(coo_centsize(shape))  # shapeの外形のセントロイド・サイズを行列にしてcentroidsizeに格納
centroidsize <- rename(centroidsize, cs = "value")  #データ行列内のcs列を数値型に変換
pcascores <- as_tibble(pcashape$x)  # pcashapeのxを行列にしてpcascoresに格納
databasedata <- cbind(database,centroidsize, pcascores)  # database, centroidosize, pcascoresを連結してdatabasedataに格納
head(databasedata)  #databasedataの先頭6行を表示
ggplot(databasedata, aes(PC1, cs)) + geom_point(size = 2, pch = 16, alpha = 0.4, colour = "#E69F00", fill = "#ffd475") + geom_smooth(method=lm, se=FALSE) + theme(text = element_text(size=8), axis.text = element_text(size = 8)) + xlab("Principal Component 1") + ylab("CS (Centroid Size)")  # PC1とセントロイドサイズの散布図を描画し回帰直線を追加
ggplot(databasedata, aes(PC1, cs)) + geom_point(size = 2, pch = 16, alpha = 0.4, colour = "Archaeological_Unit", fill = "#ffd475") + geom_smooth(method=lm, se=FALSE) + theme(text = element_text(size=8), axis.text = element_text(size = 8)) + xlab("Principal Component 1") + ylab("CS (Centroid Size)")  # PC1とセントロイドサイズの散布図を描画し回帰直線を追加
ggplot(databasedata, aes(PC1, cs)) + geom_point(size = 2, pch = 16, alpha = 0.4, colour = "#E69F00", fill = "#ffd475") + geom_smooth(method=lm, se=FALSE) + theme(text = element_text(size=8), axis.text = element_text(size = 8)) + xlab("Principal Component 1") + ylab("CS (Centroid Size)")  # PC1とセントロイドサイズの散布図を描画し回帰直線を追加
cor(databasedata$PC1, databasedata$cs)  #PC1とセントロイドサイズの相関
cor.test(databasedata$PC1, databasedata$cs)  #同上を検証
files <- list.files("C:/Users/cshog/Desktop/pottery", full.names=TRUE)
files
out   <- import_jpg(files)
out
files <- list.files("C:/Users/cshog/Desktop/pottery", full.names=TRUE)
out   <- import_jpg(files)
library(Momocs)
out   <- import_jpg(files)
od    <- Out(out)
panel(od)
od %>% coo_center() %>% coo_scale() %>% efourier(nb.h = 5) %>% PCA() %>% plot_PCA()
library(Momocs)
files <- list.files("C:/Users/cshog/Desktop/pottery", full.names=TRUE)
out   <- import_jpg(files)
od    <- Out(out)
panel(od)
od %>% coo_center() %>% coo_scale() %>% efourier(nb.h = 5) %>% PCA() %>% plot_PCA()
files <- list.files("C:/Users/cshog/Desktop/pottery", full.names=TRUE)
out   <- import_jpg(files)
library(Momocs)
out   <- import_jpg(files)
od    <- Out(out)
panel(od)
od %>% coo_center() %>% coo_scale() %>% efourier(nb.h = 5) %>% PCA() %>% plot_PCA()
library(Momocs)
library(ggtree)
newshape <- shape %>% coo_sample(75)
newshape <- shape %>% coo_sample(shape, 75)
newshape <- coo_sample(shape, 75)
coo_sample(shape, 75)
pcashape$x[1:75]
pcashape$x[,1:75]
shape[1:75]
efashapenew <- efourier(shape[1:75], nb.h = 8)
pcanew <- PCA(efashapenew)
PCA(efashapenew)
efashapenew
shape2 <- shape[1:50]
shape2efa <- efourier(shape2, nb.h = 10)
PCA(shape2efa)
shape2efa
pcashape$x
pcashape$x[1:50]
pcashape$x[,1:50]
pcashape$x[,,1:50]
pcashape$x[1:50,]
test2 <- pcashape$x[1:75,]
tree2 <- hclust(dist(test2))
ggtree(tree2)
ggtree(tree2, layout = "circular")
ggtree(tree2, layout = "circular") + nodelab()
ggtree(tree2, layout = "circular") + geom_tippoint()
test2 <- pcashape$x[1:40,]
tree2 <- hclust(dist(test2))
ggtree(tree2, layout = "circular") + geom_tippoint()
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL","English") #Windowsにおけるエンコード問題解決用
database <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/database.rds")  #GitHubリポジトリの遺跡・資料データをdatabaseへ読み込み
tpsdata <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/tpslines.rds")   #GitHubリポジトリのtpsアウトラインデータをtpsdataへ読み込み
if(!require("Momocs")) install.packages('Momocs', repos='http://cran.us.r-project.org')  # Momocsのチェックとインストール
if(!require("tidyverse")) install.packages('tidyverse', repos='http://cran.us.r-project.org')  #tidyverseのチェックとインストール
if(!require("rio")) install.packages('rio', repos='http://cran.us.r-project.org')  #rioのチェックとインストール
library(Momocs)  #Momocsのアクティベート
library(tidyverse)  #tidyverseのアクティベート
View(database)
head(database)  #databaseの先頭数行を呼び出す
database$Archaeological_Unit <- as.factor(database$Archaeological_Unit)  #Archaeological_Unitを因子型(factor)に変更
is.factor(database$Archaeological_Unit) # check to see the data is now of type 'character'／データが文字列(character)かどうかを確認
summary(database$Archaeological_Unit) #Archaeological_Unitを集計
shape <- Out(tpsdata$coo, fac = database) # incorporating our database as our factors／tps座標データをアウトラインに変換し，データベースの因子型データArchaeological_unitとともにshapeに格納
shape # call the object／オブジェクトの呼び出し
panel(shape, main = "", fac = 'Archaeological_Unit')  #「かたち」のデータを，考古学的文化ごとに色分けして可視化
panel(shape)
panel(shape, main = "", fac = 'Archaeological_Unit')  #「かたち」のデータを，考古学的文化ごとに色分けして可視化
panel(shape, main = "", fac = 'Archaeological_Unit')  #「かたち」のデータを，考古学的文化ごとに色分けして可視化
mosaic(shape, fac = "Archaeological_Unit")
mosaic(shape, fac = 'Archaeological_Unit')
mosaic(shape, ~Archaeological_Unit)
coo_plot(shape[1], col = "grey", main = "Artefact #1")   # 資料1(shape[1])の「かたち」を灰色に塗りつぶして表示する，col=""で色の指定，main=""はキャプション
coo_plot(shape[1], col = "grey", main = "Artefact #1")   # 資料1(shape[1])の「かたち」を灰色に塗りつぶして表示する，col=""で色の指定，main=""はキャプション
coo_plot(shape[7], col = "grey", main = "Artefact #7")   # 資料1(shape[1])の「かたち」を灰色に塗りつぶして表示する，col=""で色の指定，main=""はキャプション
coo_plot(shape[1:3], col = "grey", main = "Artefact #7")   # 資料1(shape[1])の「かたち」を灰色に塗りつぶして表示する，col=""で色の指定，main=""はキャプション
coo_plot(shape[1], col = "grey", main = "Artefact #1")   # 資料1(shape[1])の「かたち」を灰色に塗りつぶして表示する，col=""で色の指定，main=""はキャプション
coo_plot(shape[1], col = "green", main = "Artefact #1")   # 資料1(shape[1])の「かたち」を灰色に塗りつぶして表示する，col=""で色の指定，main=""はキャプション
coo_plot(shape[1], col = "grey", main = "Artefact #1")   # 資料1(shape[1])の「かたち」を灰色に塗りつぶして表示する，col=""で色の指定，main=""はキャプション
stack(shape)
shape <- coo_center(shape)  # 基準点を揃える
shape <- coo_scale(shape)  #　スケールを揃える
shape <- coo_close(shape)  # 開曲線を閉じる
stack(shape, main = "")　　# shapeの重ね合わせ表示
stack(shape, main = "")
calibrate_harmonicpower_efourier(shape, nb.h = 20, plot = FALSE)  #資料番号4(id=4)の調和数を20まで(nb.h=20)推定
calibrate_reconstructions_efourier(shape)  # shapeの復元を計算
calibrate_deviations_efourier(shape)  # オリジナルと計算結果の「かたち」の偏差を計算
efashape <- efourier(shape, nb.h = 11, smooth.it = 0, norm = TRUE)  # shapeのアウトライン係数を第11調和まで計算しefashapeに格納
efashape
efouriertest <- efourier(shape, nb.h = 11, smooth.it = 0, norm = FALSE)
PCAtest <- PCA(efouriertest)
plot_PCA(PCAtest)
PContrib(PCAtest)
PCContrib(PCAtest)
Pcontrib(PCAtest)
PCcontrib(PCAtest)
PCcontrib(PCAtest, nax = 1:5)
rm(PCAtest)
rm(efouriertest)
pcashape <- PCA(efashape)  #EFAの結果をPCAクラスに変換しpcashapeに格納
PCcontrib(pcashape, nax = 1:5)  #EFAの主成分分析結果を第1～第5主成分軸まで計算表示
scree(pcashape)  #pcashapeの各主成分軸の寄与度を計算
plot_PCA(pcashape, axes = c(1,2), ~Archaeological_Unit, morphospace_position = "full_axes", zoom = 2, chull = FALSE) %>% layer_points(cex = 1) %>% layer_ellipses()  #PC1+PC2による考古学的文化により色分けした散布図を描画
plot_PCA(pcashape, axes = c(1,3), ~Archaeological_Unit, morphospace_position = "full_axes", zoom = 2, chull = FALSE) %>% layer_points(cex = 1) %>% layer_ellipses()  #PC1+PC3 (axes=c(1,3))による考古学的文化により色分けした散布図を描画
boxplot(pcashape, ~Archaeological_Unit, nax = 1:5)  # pcashapeの考古学的文化ごとの箱ひげ図を描画
dashape <- LDA(pcashape, ~Archaeological_Unit, retain = 0.95)  # pcashapeと「考古学的文化」に対し線形判別分析を実施，dashapeに格納
dashape$CV.correct  #dashapeを交差検証
dashape$CV.ce  #交差検証表を作成
classification_metrics(dashape)
plot_LDA(dashape, axes = c(1,2), zoom = 2, chull = FALSE) %>% layer_points(cex = 1) %>% layer_ellipses()  # dashapeの線形判別分析の結果を散布図として描画
shape %>% efourier(nb.h = 11) %>% PCA() %>% plot_PCA()
shape %>% efourier(nb.h = 11, norm = TRUE) %>% PCA() %>% plot_PCA()
shape %>% efourier(nb.h = 11, norm = FALSE) %>% PCA() %>% plot_PCA()
shape %>% efourier(nb.h = 11, norm = FALSE) %>% PCA() %>% MANOVA()
shape %>% efourier(nb.h = 11, norm = FALSE) %>% PCA() %>% MANOVA(~Archaeological_Unit)
shape %>% efourier(nb.h = 11, norm = FALSE) %>% PCA() %>% MANOVA_PW(~Archaeological_Unit)
shape %>% efourier(nb.h = 11, norm = FALSE) %>% PCA(~Archaeological_Unit) %>% layer_ellipses()
shape %>% efourier(nb.h = 11, norm = FALSE) %>% PCA(fac = Archaeological_Unit) %>% layer_ellipses()
shape %>% efourier(nb.h = 11, norm = FALSE) %>% PCA(fac = Archaeological_Unit) %>% Plot_PCA %>% layer_ellipses()
shape %>% efourier(nb.h = 11, norm = FALSE) %>% PCA(fac = Archaeological_Unit) %>% plot_PCA()
shape %>% efourier(nb.h = 11) %>% PCA() %>% plot_PCA()
shape %>% efourier(nb.h = 11, norm = TRUE) %>% PCA() %>% plot_PCA()
shape %>% efourier(nb.h = 11, norm = FALSE) %>% PCA() %>% plot_PCA()
shape %>% efourier(nb.h = 11) %>% PCA() %>% LDA(fac = "Archaeological_Unit")
shape %>% efourier(nb.h = 15) %>% PCA() %>% LDA(fac = "Archaeological_Unit")
MANOVA(pcashape, ~Archaeological_Unit, retain = 0.95)  # pcashapeと「考古学的文化」のMANOVAを実施
MANOVA_PW(pcashape, ~Archaeological_Unit, retain = 0.95)  #ペアワイズ法MANOVAを実施
CLUST(pcashape, ~Archaeological_Unit, dist_method = "euclidean", hclust_method = "complete", k = 4, retain = 0.95)  # pcashapeと「考古学的文化」によるクラスター樹形図，ユークリッド法，クラスター数=4
CLUST(pcashape, ~Archaeological_Unit, dist_method = "euclidean", hclust_method = "complete", retain = 0.95)  # pcashapeと「考古学的文化」によるクラスター樹形図，ユークリッド法，クラスター数=4
CLUST(pcashape, ~Archaeological_Unit, dist_method = "euclidean", hclust_method = "complete", k = 4, retain = 0.95) + theme_gray()  # 背景をtheme_greyに変更
KMEANS(pcashape, centers = 4)  # クラスター中心(分離数)を4としてk-means法を実施
classification <- KMEANS(pcashape, centers = 4)
classification$cluster
clusttree <- HCLUST(pcashape, ~Archaeological_Unit, dist_method = "euclidean", hclust_method = "complete", k = 4, retain = 0.95)
clusttree <- CLUST(pcashape, ~Archaeological_Unit, dist_method = "euclidean", hclust_method = "complete", k = 4, retain = 0.95)
ggtree(hclust(dist(pcashape$x)))
library(ggtree)
ggtree(hclust(dist(pcashape$x)))
ggtree(hclust(dist(pcashape$x)), layout = "circular")
ggtree(hclust(dist(pcashape$x)), layout = "circular") + geom_nodepoint()
ggtree(hclust(dist(pcashape$x)), layout = "circular") + geom_tippoint()
meanshapes <- MSHAPES(efashape, ~Archaeological_Unit)  # efashapeと「考古学的文化」により平均的「かたち」を取得しmeanshapesに格納
meanshapes <- MSHAPES(efashape, ~Archaeological_Unit)  # efashapeと「考古学的文化」により平均的「かたち」を取得しmeanshapesに格納
plot_MSHAPES(meanshapes, size = 0.75)  # meanshapesを描画，左下～右上中央が個別の「考古学的文化」の剥片尖頭器の平均的「かたち」
coo_length(shape)
coo_centsize(shape)
centroidsize <- as_tibble(coo_centsize(shape))  # shapeの外形のセントロイド・サイズを行列にしてcentroidsizeに格納
centroidsize <- rename(centroidsize, cs = "value")  #データ行列内のcs列を数値型に変換
pcascores <- as_tibble(pcashape$x)  # pcashapeのxを行列にしてpcascoresに格納
databasedata <- cbind(database,centroidsize, pcascores)  # database, centroidosize, pcascoresを連結してdatabasedataに格納
head(databasedata)  #databasedataの先頭6行を表示
ggplot(databasedata, aes(PC1, cs)) + geom_point(size = 2, pch = 16, alpha = 0.4, colour = "#E69F00", fill = "#ffd475") + geom_smooth(method=lm, se=FALSE) + theme(text = element_text(size=8), axis.text = element_text(size = 8)) + xlab("Principal Component 1") + ylab("CS (Centroid Size)")  # PC1とセントロイドサイズの散布図を描画し回帰直線を追加
ggplot(databasedata, aes(PC1, cs)) + geom_point(size = 2, pch = 16, alpha = 0.4, colour = "#E69F00", fill = "#ffd475") + geom_smooth(method=loess, se=TRUE) + theme(text = element_text(size=8), axis.text = element_text(size = 8)) + xlab("Principal Component 1") + ylab("CS (Centroid Size)")  # PC1とセントロイドサイズの散布図を描画し回帰直線を追加
cor(databasedata$PC1, databasedata$cs)  #PC1とセントロイドサイズの相関
cor.test(databasedata$PC1, databasedata$cs)  #同上を検証
files <- list.files("C:/Users/cshog/Desktop/pottery", full.names=TRUE)
files
out   <- import_jpg(files)
od    <- Out(out)
panel(od)
od %>% coo_center() %>% coo_scale() %>% efourier(nb.h = 5) %>% PCA() %>% plot_PCA()
od %>% coo_center() %>% coo_scale() %>% efourier(nb.h = 5) %>% CLUST()
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL","English") #Windowsにおけるエンコード問題解決用
if(!require("Momocs")) install.packages('Momocs', repos='http://cran.us.r-project.org')  # Momocsのチェックとインストール
if(!require("tidyverse")) install.packages('tidyverse', repos='http://cran.us.r-project.org')  #tidyverseのチェックとインストール
if(!require("rio")) install.packages('rio', repos='http://cran.us.r-project.org')  #rioのチェックとインストール
database <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/database.rds")  #GitHubリポジトリの遺跡・資料データをdatabaseへ読み込み
tpsdata <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/tpslines.rds")   #GitHubリポジトリのtpsアウトラインデータをtpsdataへ読み込み
database$Archaeological_Unit <- as.factor(database$Archaeological_Unit)  #Archaeological_Unitを因子型(factor)に変更
is.factor(database$Archaeological_Unit) # check to see the data is now of type 'character'／データが文字列(character)かどうかを確認
shape <- Out(tpsdata$coo, fac = database) # incorporating our database as our factors／tps座標データをアウトラインに変換し，データベースの因子型データArchaeological_unitとともにshapeに格納
shape # call the object／オブジェクトの呼び出し
shape <- coo_center(shape)  # 基準点を揃える
shape <- coo_scale(shape)  #　スケールを揃える
shape <- coo_close(shape)  # 開曲線を閉じる
stack(shape, main = "")　　# shapeの重ね合わせ表示
efashapenorm <- efourier(shape, nb.h = 11, smooth.it = 0, norm = TRUE)
efashapenorm <- efourier(shape, nb.h = 11, smooth.it = 0, norm = TRUE)
efashape <- efourier(shape, nb.h = 11, smooth.it = 0, norm = FALSE)
PCcontrib(efashapenorm)
pcashape <- PCA(efashape)  #EFAの結果をPCAクラスに変換しpcashapeに格納
pcashapenorm <- PCA(efashapenorm)
PCcontrib(efashapenorm)
PCcontrib(pcashapenorm)
pcashapenorm <- PCA(efashapenorm, nax = 1:4)
pcashapenorm <- PCA(efashapenorm, nax = 4)
PCcontrib(pcashapenorm, nax = 1:4)
PCcontrib(pcashape, nax = 1:4)
plot_PCA(pcashape, morphospace = "XY")
plot_PCA(pcashape)
plot_PCA(pcashape, ~Archaeological_Unit)
efashape %>% LDA()
efashape %>% LDA(fac = Archaeological_Unit)
efashape %>% LDA(fac = "Archaeological_Unit")
efashapenorm %>% LDA(fac = "Archaeological_Unit")
efashape %>% LDA(fac = "Archaeological_Unit")
plot_PCA(pcashape)
plot_PCA(pcashapenorm)
plot_PCA(pcashape)
library(Momocs)
plot_PCA(pcashape)
shape %>% efourier(norm = FALSE) %>% PCA() %>% plot_PCA()
shape %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% plot_PCA()
shape %>% efourier(norm = TRUE, nb.h = 11) %>% PCA() %>% plot_PCA()
shape %>% efourier(norm = TRUE, nb.h = 11) %>% PCA() %>% PCcontrib()
shape %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% plot_PCA(nax = 1:5)
shape %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% PCcontrib(nax = 1:5)
shape %>% efourier(norm = TRUE, nb.h = 11) %>% PCA() %>% PCcontrib(nax = 1:5)
shape %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% plot_PCA()
shape %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% plot_PCA(morphospace_position = "XY")
shape %>% efourier(norm = TRUE, nb.h = 11) %>% PCA() %>% plot_PCA(morphospace_position = "XY")
shape %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% plot_PCA(morphospace_position = "XY")
shape %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% PCcontrib(nax = 1:5)
shape %>% efourier(norm = TRUE, nb.h = 11) %>% PCA() %>% PCcontrib(nax = 1:5)
shape %>% coo_rotate(theta = 1.57) %>% efourier(norm = TRUE, nb.h = 11) %>% PCA() %>% PCcontrib(nax = 1:5)
shape %>% coo_rotate(theta = 1.57) %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% PCcontrib(nax = 1:5)
shape %>% coo_rotate(theta = 1.57) %>% efourier(norm = FALSE, nb.h = 11) %>% PCA() %>% plot_PCA()
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL","English") #Windowsにおけるエンコード問題解決用
database <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/database.rds")  #GitHubリポジトリの遺跡・資料データをdatabaseへ読み込み
tpsdata <- rio::import("https://github.com/CSHoggard/-workshopjapan2020/raw/master/workshop_2/tpslines.rds")   #GitHubリポジトリのtpsアウトラインデータをtpsdataへ読み込み
hclust(dist(pcashape$x))
tree <- hclust(dist(pcashape$x))
library(Rphylip)
contmltree <- RContml(tree)
contmltree <- Rcontml(tree)
contmltree <- Rcontml(hclust(dist(pcashape$x)))
(hclust(dist(pcashape$x)))
as.matrix((hclust(dist(pcashape$x))))
Rcontml(as.matrix((hclust(dist(pcashape$x)))))
treeml <- Rcontml(as.matrix((hclust(dist(pcashape$x)))))
pcashape[1:50]
pcashape$x[,1:50]
pcashape$x[1:50]
pcashape$x[,1:50]
pcashape$x[,,1:50]
treeml <- Rcontml(as.matrix((hclust(dist(pcashape$x)))))
treeml <- Rcontml(((hclust(dist(pcashape$x)))))
pcashape
pcashape <- PCA(efashape)
pcashape <- PCA(efashape)
library(Momocs)
pcashape <- PCA(efashape)
treeml <- Rcontml(((hclust(dist(pcashape$x)))))
pcashape$x
pcashape$x[1:50]
pcashape$x[,1:50]
pcashape$x[1:50,]
testtree <- Rcontml(pcashape$x[1:50,])
library(ggtree)
ggtree(testtree)
ggtree(testtree, layout = "circular")
ggtree(testtree, layout = "circular", branch.length = "none")
ggtree(testtree, layout = "circular", branch.length = "none") + geom_point2()
ggtree(testtree, layout = "circular", branch.length = "none") + geom_tippoint()
outlines_combined_nicholas_2016 <- readRDS("C:/Users/cshog/Desktop/outlines_combined_nicholas_2016.RDS")
outlines_combined_nicholas_2016
test <- outlines_combined_nicholas_2016
library('Momocs')
test
panel(test)
stack(test)
test <- coo_centre(test)
test <- coo_scale(test)
stack(test)
calibrate_harmonicpower_efourier(test)
calibrate_harmonicpower_efourier(outlines_combined_nicholas_2016)
eftest <- efourier(test, nb.h = 7)
PCA(eftest)
plot.PCA(eftest)
eftest %>% PCA() %>% plot_PCA()
test %>% efourier(nb.h = 7, norm = FALSE) %>% PCA() %>% plot_PCA()
test %>% efourier(nb.h = 19, norm = FALSE) %>% PCA() %>% plot_PCA()
test %>% efourier(nb.h = 19, norm = TRUE) %>% PCA() %>% plot_PCA()
test %>% efourier(nb.h = 19, norm = TRUE) %>% PCA() %>% plot_PCA(morphospace_position = "XY")
test %>% efourier(nb.h = 19, norm = TRUE) %>% PCA() %>% PCcontrib()
test %>% efourier(nb.h = 19, norm = TRUE) %>% PCA() %>% plot_PCA(nax = 1:5)
test %>% efourier(nb.h = 19, norm = FALSE) %>% PCA() %>% plot_PCA()
test %>% efourier(nb.h = 19, norm = TRUE) %>% PCA() %>% PCcontrib(nax = 1:5)
outlines_combined_nicholas_2016 <- readRDS("C:/Users/cshog/Desktop/outlines_combined_nicholas_2016.RDS")
library("Momocs")
calibrate_harmonicpower_efourier(outlines_combined_nicholas_2016)
sum.of.squares <- function(x,y) {x^2 + y^2}
x <- 2
y <- 3
sum.of.squares(2,3)
sum.of.squares(3,4)
i <- grep("Length", names(iris))
x <- iris[, i]
cl <- kmeans(x, 3, nstart = 10)
plot(x, col = cl$cluster)
set.seed(12)
init <- sample(3, nrow(x), replace = TRUE)
plot(x, col = init)
plot(x, col = init)
init <- sample(3, nrow(x), replace = TRUE)
plot(x, col = init)
init <- sample(3, nrow(x), replace = TRUE)
plot(x, col = init)
par(mfrow = c(1, 2))
plot(x, col = init)
centres <- sapply(1:3, function(i) colMeans(x[init == i, ], ))
centres <- t(centres)
points(centres[, 1], centres[, 2], pch = 19, col = 1:3)
tmp <- dist(rbind(centres, x))
tmp <- as.matrix(tmp)[, 1:3]
ki <- apply(tmp, 1, which.min)
ki <- ki[-(1:3)]
plot(x, col = ki)
points(centres[, 1], centres[, 2], pch = 19, col = 1:3)
ks <- 1:5
tot_within_ss <- sapply(ks, function(k) {
cl <- kmeans(x, k, nstart = 10)
cl$tot.withinss
})
plot(ks, tot_within_ss, type = "b")
par(mfrow = c(1, 1))
plot(ks, tot_within_ss, type = "b")
dist(iris)
d <- dist(iris[, 1:4])
iris[, 1:4]
d
hcl <- hclust(d)
hcl
plot(hcl)
cutree(hcl, h = 1.5)
plot(cutree(hcl, h = 1.5))
cutree(hcl, h = 1.5)
cutree(hcl, h = 1)
cutree(hcl, h = 2)
plot(hcl)
cutree(hcl, h = 3)
cutree(hcl, h = 3.5)
cutree(hcl, k = 3)
plot(hcl)
abline(h = 3.9, col = "red")
km <- kmeans(iris[, 1:4], centers = 3, nstart = 10)
hcl <- hclust(dist(iris[, 1:4]))
table(km$cluster, cutree(hcl, k = 3))
par(mfrow = c(1, 2))
plot(iris$Petal.Length, iris$Sepal.Length, col = km$cluster, main = "k-means")
plot(iris$Petal.Length, iris$Sepal.Length, col = cutree(hcl, k = 3), main = "Hierarchical clustering")
table(iris$Species, km$cluster)
install.packages("gt")
gt(iris)
library("gt")
gt(iris)
if(!require("ggtree")) install.packages('ggtree', repos='http://cran.us.r-project.org') ### GGTREE 1.16.6
if(!require("tidyverse")) install.packages('tidyverse', repos='http://cran.us.r-project.org') ### TIDYVERSE 1.2.1
if(!require("Momocs")) install.packages('Momocs', repos='http://cran.us.r-project.org') ### MOMOCS 1.2.9
if(!require("directlabels")) install.packages('directlabels', repos='http://cran.us.r-project.org') ### DIRECTLABELS 2018.05.22
if(!require("cowplot")) install.packages('cowplot', repos='http://cran.us.r-project.org') ### COWPLOT 1.0.0
if(!require("readxl")) install.packages('readxl', repos='http://cran.us.r-project.org') ### READXL 1.3.1
library("ggtree")
library("tidyverse")
library("Momocs")
library("directlabels")
library("cowplot")
library("readxl")
dataset <- import_tps("ivanovaite_et_al_2019.tps", curves = TRUE) ### IMPORT .TPS FILE (ORDERED)
setwd("~/")
setwd("C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/Github/-Ivanovaite_et_al_2019")
dataset <- import_tps("ivanovaite_et_al_2019.tps", curves = TRUE) ### IMPORT .TPS FILE (ORDERED)
database <- read_excel(path = "ivanovaite_et_al_2019.xlsx") ### IMPORT .XLSX FILE (ORDERED) #readxl is used for encoding purposes
database$Country <- as.factor(database$Country) ### CONVERT TO FACTOR
database$Archaeological_Unit <- as.factor(database$Archaeological_Unit) ### CONVERT TO FACTOR
outline <- Out(dataset$coo, fac = database) ### CREATION OF THE OUTLINE FILE
outline <- coo_close(outline) ### CLOSE ALL OUTLINES
outline <- coo_center(outline) ### NORMALISATION PROCEDURE: CENTRE ALL OUTLINES
outline <- coo_scale(outline) ### NORMALISATION PROCEDURE: SCALE ALL OUTLINES
panel(outline) ### PANEL VISUALISATION: ALL OUTLINES
efourieroutline <- efourier(outline, nb.h = 11, smooth.it = 0, norm = TRUE) ### 99% HARMONIC POWER USED
pcaoutline <- PCA(efourieroutline) ### CREATION OF A PCA FILE
pcdata <- as_df(pcaoutline)
row.names(pcdata) <- pcdata$File_Name
View(pcdata)
install.packages("caret", dependencies=c("Depends", "Suggests"))
install.packages(c("ape", "backports", "fit.models", "geomorph", "GGally", "ggplot2", "ggspatial", "haven", "htmltools", "httpuv", "later", "lubridate", "lwgeom", "mvtnorm", "OpenImageR", "promises", "rgdal", "rmarkdown", "rms", "rstatix", "sf", "transformr", "units", "vctrs"))
